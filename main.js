(()=>{"use strict";var __webpack_modules__={592:()=>{eval('\n;// CONCATENATED MODULE: ./src/components/validate.js\nvar showInputError = function showInputError(formElement, inputElement, errorMessage, settings) {\n  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));\n  inputElement.classList.add(settings.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(settings.errorClass);\n};\nvar hideInputError = function hideInputError(formElement, inputElement, settings) {\n  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));\n  inputElement.classList.remove(settings.inputErrorClass);\n  errorElement.classList.remove(settings.errorClass);\n  errorElement.textContent = \'\';\n};\nvar checkInputValidity = function checkInputValidity(formElement, inputElement, settings) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity("");\n  }\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage, settings);\n  } else {\n    hideInputError(formElement, inputElement, settings);\n  }\n};\nvar setEventListeners = function setEventListeners(formElement, settings) {\n  var inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\n  var buttonElement = formElement.querySelector(settings.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, settings);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener(\'input\', function () {\n      checkInputValidity(formElement, inputElement, settings);\n      toggleButtonState(inputList, buttonElement, settings);\n    });\n  });\n};\nvar enableValidation = function enableValidation(settings) {\n  var formList = Array.from(document.querySelectorAll(settings.formSelector));\n  formList.forEach(function (formElement) {\n    var fieldsetList = Array.from(formElement.querySelectorAll(settings.fieldsetSelector));\n    fieldsetList.forEach(function (fieldset) {\n      setEventListeners(fieldset, settings);\n    });\n  });\n};\nvar hasInvalidInput = function hasInvalidInput(inputList) {\n  return inputList.some(function (inputElement) {\n    return !inputElement.validity.valid;\n  });\n};\nvar toggleButtonState = function toggleButtonState(inputList, buttonElement, settings) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(settings.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(settings.inactiveButtonClass);\n  }\n  ;\n};\n\n;// CONCATENATED MODULE: ./src/components/api.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nvar server = "https://mesto.nomoreparties.co/v1/plus-cohort-22";\nfunction api(_x, _x2, _x3) {\n  return _api.apply(this, arguments);\n}\nfunction _api() {\n  _api = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(uri, data, method) {\n    var options, response, result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = {\n            headers: {\n              authorization: \'e8286efd-49b8-4cdc-bbfa-0c7d47fdc660\'\n            }\n          };\n          if (data) {\n            options = {\n              method: method,\n              headers: {\n                authorization: \'e8286efd-49b8-4cdc-bbfa-0c7d47fdc660\',\n                \'Content-Type\': \'application/json\'\n              },\n              body: JSON.stringify(data)\n            };\n          }\n\n          // return fetch(server + uri, options)\n          // \t.then(res => {\n          // \t\tif (res.ok) return res.json();\n          // \t\treturn Promise.reject(`Ошибка: ${res.status}`);\n          // \t})\n          _context.prev = 2;\n          _context.next = 5;\n          return fetch(server + uri, options);\n        case 5:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 8;\n            break;\n          }\n          throw new Error(\'Ответ сети был не ok.\');\n        case 8:\n          _context.next = 10;\n          return response.json();\n        case 10:\n          result = _context.sent;\n          return _context.abrupt("return", result);\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context["catch"](2);\n          console.log(\'Возникла проблема с вашим fetch запросом: \', _context.t0.message);\n        case 17:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 14]]);\n  }));\n  return _api.apply(this, arguments);\n}\nfunction getUserInfo() {\n  return api(\'/users/me\');\n}\nfunction patchUserInfo(data) {\n  return api(\'/users/me\', data, \'PATCH\');\n}\nfunction getCards() {\n  return api(\'/cards\');\n}\nfunction postCard(data) {\n  return api(\'/cards\', data, \'POST\');\n}\nfunction deleteCard(id) {\n  return api("/cards/".concat(id), {}, \'DELETE\');\n}\nfunction likeCard(id) {\n  return api("/cards/likes/".concat(id), {}, \'PUT\');\n}\nfunction unlikeCard(id) {\n  return api("/cards/likes/".concat(id), {}, \'DELETE\');\n}\nfunction changeAvatar(data) {\n  return api(\'/users/me/avatar\', data, \'PATCH\');\n}\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\n\nvar profileId;\nvar profileName = document.querySelector(\'.profile__name\');\nvar profileAbout = document.querySelector(\'.profile__about\');\nvar profileAvatar = document.querySelector(\'.profile__avatar\');\nvar avatarLink = document.querySelector(\'#avatar-link-input\');\nvar nameInput = document.querySelector(\'#name-input\');\nvar aboutInput = document.querySelector(\'#about-input\');\nvar cardPopup = document.querySelector(\'.card-popup\');\nvar profilePopup = document.querySelector(\'.profile-popup\');\nvar avatarPopup = document.querySelector(\'.avatar-popup\');\nvar formList = Array.from(document.querySelectorAll(\'.form\'));\nvar cardsList = document.querySelector(\'.cards__list\');\nvar editBtn = document.querySelector(\'.profile__edit-btn\');\nvar addBtn = document.querySelector(\'.profile__add-btn\');\nvar openPopup = function openPopup(popup) {\n  popup.classList.add(\'popup_opened\');\n  document.addEventListener(\'keydown\', closeByEscape);\n};\nvar closePopup = function closePopup(popup) {\n  popup.classList.remove(\'popup_opened\');\n  document.removeEventListener(\'keydown\', closeByEscape);\n};\nvar setOpenPopupListeners = function setOpenPopupListeners() {\n  editBtn.addEventListener(\'click\', function () {\n    fillProfileForm();\n    openPopup(profilePopup);\n    Array.from(profilePopup.querySelectorAll(\'.form__input\')).forEach(function (inputElement) {\n      checkInputValidity(profilePopup, inputElement, {\n        inputErrorClass: \'form__input_type_error\',\n        errorClass: \'form__input-error_active\'\n      });\n    });\n  });\n  addBtn.addEventListener(\'click\', function () {\n    return openPopup(cardPopup);\n  });\n  profileAvatar.addEventListener(\'click\', function () {\n    return openPopup(avatarPopup);\n  });\n};\nvar setClosePopupListeners = function setClosePopupListeners() {\n  var popups = document.querySelectorAll(\'.popup\');\n  popups.forEach(function (popup) {\n    popup.addEventListener(\'mousedown\', function (evt) {\n      if (evt.target.classList.contains(\'popup_opened\')) {\n        closePopup(popup);\n      }\n      if (evt.target.classList.contains(\'popup__close-btn\')) {\n        closePopup(popup);\n      }\n    });\n  });\n};\nvar closeByEscape = function closeByEscape(evt) {\n  if (evt.key === \'Escape\') {\n    var openedPopup = document.querySelector(\'.popup_opened\');\n    closePopup(openedPopup);\n  }\n};\nvar fillProfileForm = function fillProfileForm() {\n  nameInput.value = profileName.textContent;\n  aboutInput.value = profileAbout.textContent;\n};\ngetUserInfo().then(function (user) {\n  profileAvatar.style.backgroundImage = "url(".concat(user.avatar, ")");\n  profileName.textContent = user.name;\n  profileAbout.textContent = user.about;\n  profileId = user._id;\n});\nvar handleProfileFormSubmit = function handleProfileFormSubmit(evt) {\n  evt.preventDefault();\n  var buttonElement = evt.target.querySelector(\'.form__submit-btn\');\n  buttonElement.textContent = \'Сохранение...\';\n  patchUserInfo({\n    name: nameInput.value,\n    about: aboutInput.value\n  }).then(function (res) {\n    profileName.textContent = res.name;\n    profileAbout.textContent = res.about;\n    closePopup(profilePopup);\n  }).finally(function () {\n    return buttonElement.textContent = \'Сохранить\';\n  });\n};\nvar handleAddFormSubmit = function handleAddFormSubmit(evt) {\n  evt.preventDefault();\n  var inputList = Array.from(evt.target.querySelectorAll(\'.form__input\'));\n  var buttonElement = evt.target.querySelector(\'.form__submit-btn\');\n  var cardName = evt.target.placeInput;\n  var cardLink = evt.target.linkInput;\n  buttonElement.textContent = \'Сохранение...\';\n  postCard({\n    name: cardName.value,\n    link: cardLink.value\n  }).then(function (res) {\n    var card = createCard(res);\n    cardsList.prepend(card);\n    evt.target.reset();\n    toggleButtonState(inputList, buttonElement, {\n      inactiveButtonClass: \'form__submit-btn_disabled\'\n    });\n    closePopup(cardPopup);\n  }).finally(function () {\n    return buttonElement.textContent = \'Сохранить\';\n  });\n};\nvar handleChangeAvatarFormSubmit = function handleChangeAvatarFormSubmit(evt) {\n  evt.preventDefault();\n  var inputList = Array.from(evt.target.querySelectorAll(\'.form__input\'));\n  var buttonElement = evt.target.querySelector(\'.form__submit-btn\');\n  buttonElement.textContent = \'Сохранение...\';\n  changeAvatar({\n    avatar: avatarLink.value\n  }).then(function (res) {\n    profileAvatar.style.backgroundImage = "url(".concat(res.avatar, ")");\n    evt.target.reset();\n    toggleButtonState(inputList, buttonElement, {\n      inactiveButtonClass: \'form__submit-btn_disabled\'\n    });\n    closePopup(avatarPopup);\n  }).finally(function () {\n    return buttonElement.textContent = \'Сохранить\';\n  });\n};\nvar enableFormSubmition = function enableFormSubmition() {\n  formList.forEach(function (formElement) {\n    formElement.addEventListener(\'submit\', function (evt) {\n      if (evt.target.name === \'edit-profile-form\') {\n        handleProfileFormSubmit(evt);\n      } else if (evt.target.name === \'add-card-form\') {\n        handleAddFormSubmit(evt);\n      } else if (evt.target.name === \'change-avatar-form\') {\n        handleChangeAvatarFormSubmit(evt);\n      }\n    });\n  });\n};\n\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\nvar imagePopup = document.querySelector(\'.image-popup\');\nvar card_cardsList = document.querySelector(\'.cards__list\');\nvar setLikeListener = function setLikeListener(card, cardId) {\n  var cardLike = card.querySelector(\'.card__like-btn\');\n  var likeCounter = card.querySelector(\'.card__like-counter\');\n  cardLike.addEventListener(\'click\', function () {\n    if (cardLike.classList.contains(\'card__like-btn_liked\')) {\n      unlikeCard(cardId).then(function (res) {\n        likeCounter.textContent = res.likes.length;\n        cardLike.classList.toggle(\'card__like-btn_liked\');\n      });\n    } else {\n      likeCard(cardId).then(function (res) {\n        likeCounter.textContent = res.likes.length;\n        cardLike.classList.toggle(\'card__like-btn_liked\');\n      });\n    }\n  });\n};\nvar setDeleteListener = function setDeleteListener(card, cardId) {\n  var cardDelete = card.querySelector(\'.card__delete-btn\');\n  cardDelete.addEventListener(\'click\', function () {\n    deleteCard(cardId).then(function (res) {\n      cardDelete.closest(\'.card\').remove();\n    });\n  });\n};\nvar handleCardClick = function handleCardClick(item) {\n  var cardImage = imagePopup.querySelector(\'.card-zoom__image\');\n  var cardCaption = imagePopup.querySelector(\'.card-zoom__caption\');\n  cardImage.src = item.link;\n  cardImage.alt = item.name;\n  cardCaption.textContent = item.name;\n  openPopup(imagePopup);\n};\nvar createCard = function createCard(item) {\n  var cardTemplate = document.querySelector(\'#card-template\').content;\n  var card = cardTemplate.querySelector(\'.card\').cloneNode(true);\n  var cardImage = card.querySelector(\'.card__image\');\n  var cardName = card.querySelector(\'.card__name\');\n  var cardLikeCounter = card.querySelector(\'.card__like-counter\');\n  var cardLikeBtn = card.querySelector(\'.card__like-btn\');\n  var cardDelete = card.querySelector(\'.card__delete-btn\');\n  cardImage.src = item.link;\n  cardImage.alt = item.name;\n  cardName.textContent = item.name;\n  cardLikeCounter.textContent = item.likes.length;\n  if (item.owner._id !== profileId) {\n    cardDelete.style.display = \'none\';\n  } else {\n    setDeleteListener(card, item._id);\n  }\n  item.likes.forEach(function (user) {\n    if (user._id === profileId) {\n      cardLikeBtn.classList.toggle(\'card__like-btn_liked\');\n      return;\n    }\n  });\n  setLikeListener(card, item._id);\n  cardImage.addEventListener(\'click\', function () {\n    return handleCardClick(item);\n  });\n  return card;\n};\nvar renderInitalCards = function renderInitalCards() {\n  getCards().then(function (initialCards) {\n    initialCards.forEach(function (item) {\n      var card = createCard(item);\n      card_cardsList.append(card);\n    });\n  });\n};\n\n;// CONCATENATED MODULE: ./src/components/index.js\n\n\n\n\nrenderInitalCards();\nenableFormSubmition();\nsetClosePopupListeners();\nsetOpenPopupListeners();\nenableValidation({\n  formSelector: \'.form\',\n  fieldsetSelector: \'.form__set\',\n  inputSelector: \'.form__input\',\n  submitButtonSelector: \'.form__submit-btn\',\n  inactiveButtonClass: \'form__submit-btn_disabled\',\n  inputErrorClass: \'form__input_type_error\',\n  errorClass: \'form__input-error_active\'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///592\n')}},__webpack_exports__={};__webpack_modules__[592]()})();